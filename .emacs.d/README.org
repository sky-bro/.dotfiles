#+TITLE: My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+STARTUP: overview

* Introduction

  put ~#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el~ at the top of your ~org~ file, then after running ~org-babel-tangle (C-c C-v t)~ (this can be [[*Tangle Config Files][automated]] -- to be executed on save), the lisp blocks will be written to your ~init-new.el~ file.

* Basic

** Packages

*** package archives

set your package archives here, and enable use-package.

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (let (;; tsinghua
        (archives '("http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/"
                    "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/"
                    "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/"))
        ;; ustc
        (archives '("http://mirrors.ustc.edu.cn/elpa/melpa/"
                    "http://mirrors.ustc.edu.cn/elpa/org/"
                    "http://mirrors.ustc.edu.cn/elpa/gnu/"))
        ;; official
        ;; (archives '("https://melpa.org/packages/"
        ;;             "http://orgmode.org/elpa/"
        ;;             "https://elpa.gnu.org/packages/"))
        )
    (setq package-archives `(("melpa" . ,(nth 0 archives))
                             ("org" . ,(nth 1 archives))
                             ("gnu" . ,(nth 2 archives)))))

  (package-initialize)
#+end_src

*** use-package

[[https://jwiegley.github.io/use-package/keywords/][use-package keywords]]

#+begin_src emacs-lisp
  ;; https://www.reddit.com/r/emacs/comments/1rdstn/set_packageenableatstartup_to_nil_for_slightly/
  (setq package-enable-at-startup nil)

  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** simpler UI

#+begin_src emacs-lisp
  ;; Produce backtraces when errors occur: can be helpful to diagnose startup issues
  ;; (setq debug-on-error t)
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
  (add-hook 'after-init-hook 'electric-pair-mode)
  (add-hook 'after-init-hook 'electric-indent-mode)
  (add-hook 'after-init-hook 'global-auto-revert-mode)
  (use-package autorevert
    :diminish)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  ;; default values
  (setq-default
   help-window-select t
   ;; only enable trailing whitespaces in some modes
   show-trailing-whitespace nil
   buffers-menu-max-size 60
   case-fold-search t
   column-number-mode t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode nil
   create-lockfiles nil
   auto-save-default nil
   make-backup-files nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   tooltip-delay 1.5
   truncate-lines nil
   truncate-partial-width-windows nil)
#+end_src

** custom file

save and update custom settings in a separate file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Startup Performance

*** garbage collection

Adjust garbage collection threashold for startup and after, garbage collection happens more frequently but in less time

#+begin_src emacs-lisp
  ;; Adjust garbage collection thresholds during startup, and thereafter
  (let ((normal-gc-cons-threshold (* 20 1024 1024))
        (init-gc-cons-threshold (* 128 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold (* 20 1024 1024)))))
#+end_src

*** Display startup time

#+begin_src emacs-lisp
  (defun k4i/display-startup-time ()
    (message "init completed in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'after-init-hook #'k4i/display-startup-time)
#+end_src

** search tools

=("rg" "ag" "pt" "ack" "grep")=

#+begin_src emacs-lisp
  (use-package wgrep)
#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  (use-package ivy
    :after counsel
    :diminish
    :bind (("C-s" . swiper)
           ("C-M-j" . ivy-switch-buffer)
           ("C-M-S-j" . ivy-switch-tab)
           :map ivy-minibuffer-map
           ("TAB" . ivy-partial)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :custom (ivy-use-virtual-buffers t)
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (:map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+end_src

*** Improved Candidate Sorting with prescient.el

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them.  This can be especially helpful when using =M-x= to run commands that you don't have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the [[https://youtu.be/T9kygXveEz0][video on prescient.el]] for more details on how to configure it!

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** initial scratch message

#+begin_src emacs-lisp
  (setq initial-scratch-message
        ";; Hello Hackers! Welcom to emacs!\n\n;; proxys\n(proxy-socks-toggle)\n(proxy-http-toggle)\n\n")
#+end_src

* COMMENT ParEdit

#+begin_src emacs-lisp
  (use-package paredit
    :hook ((emacs-lisp-mode-hook
            lisp-interaction-mode-hook
            lisp-mode-hook
            eval-expression-minibuffer-setup-hook
            slime-repl-mode-hook)
           . paredit-mode)
    :config
    ;; (diminish 'paredit-mode "()")
    )
#+end_src

* Input Method

#+begin_src emacs-lisp
  (use-package pyim-basedict)

  (use-package pyim
    :after pyim-basedict
    :config
    (pyim-basedict-enable)
    (setq pyim-page-length 9)
    (setq default-input-method "pyim")
    (setq pyim-punctuation-translate-p '(no yes auto)))
#+end_src

* Spell Check

Flyspell enables on-the-fly spell checking in Emacs by the means of a minor mode.

install hunspell, aspell or ispell

personal dictionary stored at =.hunspell_en_US=.

#+begin_src shell
  sudo pacman -Sy hunspell-en_us
#+end_src

#+begin_src emacs-lisp
  (defun k4i/save-word-to-dict ()
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (and (consp word) (yes-or-no-p (format "save word %S?" (car word))))
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location)
        (message "saved %S to dict" (car word))
        )
      )
    )
#+end_src

#+begin_src emacs-lisp
  (use-package flyspell
    :custom
    (flyspell-issue-message-flag nil)
    :bind
    ("C-M-S-i" . k4i/save-word-to-dict)
    :config
    (defun flyspell-on-for-buffer-type ()
      "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
      (interactive)
      (if (not (symbol-value flyspell-mode)) ; if not already on
          (progn
            (if (derived-mode-p 'prog-mode)
                (progn
                  (message "Flyspell on (code)")
                  (flyspell-prog-mode))
              ;; else
              (progn
                (message "Flyspell on (text)")
                (flyspell-mode 1)))
            ;; I tried putting (flyspell-buffer) here but it didn't seem to work
            )))

    (defun flyspell-toggle ()
      "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
      (interactive)
      (if (symbol-value flyspell-mode)
          (progn ; flyspell is on, turn it off
            (message "Flyspell off")
            (flyspell-mode -1))
                                          ; else - flyspell is off, turn it on
        (flyspell-on-for-buffer-type)))
    (add-hook 'find-file-hook 'flyspell-on-for-buffer-type)
    (add-hook 'after-change-major-mode-hook 'flyspell-on-for-buffer-type))
#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* Keybinding

** define-key & global-set-key

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** evil mode
This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package undo-fu)
  (use-package evil
    :init
    ;; set these variables before evil-mode is loaded
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-u-delete t)
    (setq evil-want-C-i-jump t)
    (setq evil-undo-system 'undo-fu)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** general

*** leader

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer my-space-leader
      :keymaps '(normal visual)
      :prefix "SPC")

    (my-space-leader
      "d" '((lambda () (interactive) (dired default-directory)) :which-key "dired default dir")
      "f"  '(:ignore t :which-key "file")
      "fb"  '((lambda () (interactive) (find-file (expand-file-name "~/git-repo/blog/blog-src/content-org/all-posts.en.org"))) :which-key "blogs")
      "fd" '(:ignore t :which-key "dotfiles")
      "fde" '((lambda () (interactive) (find-file (expand-file-name "~/.dotfiles/.emacs.d/README.org"))) :which-key "emacs")
      "fdw" '((lambda () (interactive) (find-file (expand-file-name "~/.dotfiles/.config/i3/config"))) :which-key "window manager")
      "k" 'kill-this-buffer
      "o"  '(:ignore t :which-key "org")
      "oa" 'org-agenda
      "oc" 'org-capture
      "r" 'resize-window
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "tf" 'treemacs
      "ts" 'flyspell-toggle
      "'" 'vterm-toggle-cd
      "=" 'format-all-buffer)

    (general-create-definer my-comma-leader
      :keymaps '(normal visual)
      :prefix ",")

    (my-comma-leader
      "k"  'kill-this-buffer))
#+end_src

*** major leader

use =,= as major mode leader key

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :diminish which-key-mode
    :custom
    (which-key-idle-delay 0.3)
    :diminish which-key-mode)
#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :config
    ;; (add-to-list 'display-buffer-alist
    ;;              `("\\*help"
    ;;                (display-buffer-reuse-window display-buffer-in-side-window)
    ;;                (reusable-frames . visible)
    ;;                (side . right)
    ;;                (window-width . 0.3)
                   ;; ))
    )
#+end_src

** window

this is from [[https://www.emacswiki.org/emacs/WindowResize][emacswiki: WindowResize]]

#+begin_src emacs-lisp
  (defvar enlarge-window-height-char ?k)
  (defvar shrink-window-height-char ?j)
  (defvar enlarge-window-width-char ?l)
  (defvar shrink-window-width-char ?h)
  (defun resize-window (&optional arg)
     "Interactively resize the selected window.
  Repeatedly prompt whether to enlarge or shrink the window until the
  response is neither `enlarge-window-char' or `shrink-window-char'.
  When called with a prefix arg, resize the window by ARG lines."
     (interactive "p")
     ;; by default arg is 1, too slow to resize
     (setq arg 3)
     (let ((prompt (format "Enlarge/Shrink window (%c/%c/%c/%c)? "
                           enlarge-window-height-char shrink-window-height-char
                           enlarge-window-width-char shrink-window-width-char))
          response)
       (while (progn
               (setq response (read-event prompt))
               (cond ((equal response enlarge-window-height-char)
                      (enlarge-window arg)
                      t)
                     ((equal response shrink-window-height-char)
                      (enlarge-window (- arg))
                      t)
                     ((equal response enlarge-window-width-char)
                      (enlarge-window-horizontally arg)
                      t)
                     ((equal response shrink-window-width-char)
                      (enlarge-window-horizontally (- arg))
                      t)
                     (t nil))))
       (push response unread-command-events)))
#+end_src

* Tabs

** centaur-tabs

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :hook (emacs-startup . centaur-tabs-mode)
    :custom
    (centaur-tabs-background-color "#f2e5bc")
    (centaur-tabs-style "chamfer")
    (centaur-tabs-height 32)
    (centaur-tabs-height 32)
    (centaur-tabs-set-icons t)
    (centaur-tabs-set-modified-marker t)
    (centaur-tabs-show-navigation-buttons t)
    ;; (centaur-tabs-set-bar 'under)
    (x-underline-at-descent-line t)
    :config
    (centaur-tabs-headline-match)
    ;; (setq centaur-tabs-gray-out-icons 'buffer)
    ;; (centaur-tabs-enable-buffer-reordering)
    ;; (setq centaur-tabs-adjust-buffer-order t)
    (setq uniquify-separator "/")
    (setq uniquify-buffer-name-style 'forward)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

   Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
   All buffer name start with * will group to \"Emacs\".
   Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
        ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
        ;; "Remote")
        ((derived-mode-p 'eshell-mode 'term-mode 'shell-mode 'vterm-mode)
       "Term")
        ((or (string-equal "*" (substring (buffer-name) 0 1))
             (memq major-mode '(magit-process-mode
                                magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'prog-mode)
         "Editing")
        ((derived-mode-p 'dired-mode)
         "Dired")
        ((memq major-mode '(helpful-mode
                            help-mode))
         "Help")
        ((memq major-mode '(org-mode
                              org-agenda-clockreport-mode
                              org-src-mode
                              org-agenda-mode
                              org-beamer-mode
                              org-indent-mode
                              org-bullets-mode
                              org-cdlatex-mode
                              org-agenda-log-mode
                              diary-mode))
           "OrgMode")
        (t
         (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (term-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    (helpful-mode . centaur-tabs-local-mode)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-c t s" . centaur-tabs-counsel-switch-group)
    ("C-c t p" . centaur-tabs-group-by-projectile-project)
    ("C-c t g" . centaur-tabs-group-buffer-groups)
    (:map evil-normal-state-map
          ("g t" . centaur-tabs-forward)
          ("g T" . centaur-tabs-backward)))
#+end_src

** use ivy to switch tabs

#+begin_src emacs-lisp
  (defun ivy-switch-tab ()
    (interactive)
    (let ((buffer (ivy-read "Switch to tab: "
                            (mapcar
                             (lambda (b)
                               (buffer-name (car b)))
                             (centaur-tabs-tabs (centaur-tabs-current-tabset))
                             ;; centaur-tabs--buffers
                             ))))
      (switch-to-buffer buffer)))
#+end_src

* Windows

#+begin_src emacs-lisp
  (defvar k4i/align-right-modes '(inferior-python-mode
                                  slime-repl-mode
                                  compilation-mode
                                  helpful-mode
                                  comint-mode
                                  text-mode
                                  org-roam-mode))

  (add-to-list 'display-buffer-alist
               `(,(lambda (buf act)
                    (member (with-current-buffer buf major-mode) k4i/align-right-modes))
                 (display-buffer--maybe-same-window
                  display-buffer-reuse-window
                  display-buffer-reuse-mode-window
                  display-buffer-in-side-window)
                 (side . right)
                 (mode . ,k4i/align-right-modes)
                 (window-width . 0.3)
                 (quit-restore ('window 'window nil nil))))
#+end_src

* UI

** Basic

#+BEGIN_SRC emacs-lisp
  ;; adjust font size for your system
  (defvar k4i/default-font-size 160)
  (defvar k4i/default-variable-font-size 160)

  ;; Make frame transparency overridable
  ;; (defvar k4i/frame-transparency '(100 . 90))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable the toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room

  (menu-bar-mode -1) ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Set frame transparency
  ;; (set-frame-parameter (selected-frame) 'alpha k4i/frame-transparency)
  ;; (add-to-list 'default-frame-alist `(alpha . ,k4i/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)
  (column-number-mode) ; show column number
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  treemacs-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Cursor

*** beacon

#+begin_src emacs-lisp
  (use-package beacon
    :custom
    (beacon-lighter "")
    (beacon-size 30)
    :config
    (beacon-mode 1))
#+end_src

*** cursor style

don't know how to set cursor as xcursor.

#+begin_src emacs-lisp
  ;; (setq x-pointer-shape x-pointer-top-left-arrow)
  (setq x-pointer-shape x-pointer-icon)
  ;; (setq x-pointer-sizing 240)
  ;; (setq x-sensitive-text-pointer-shape x-pointer-X-cursor)
  (set-mouse-color "yellow")
#+end_src

*** mouse avoidance

[[https://www.emacswiki.org/emacs/MouseAvoidance][MouseAvoidance]] moves your mouse pointer out of your way.

#+begin_src emacs-lisp
  (mouse-avoidance-mode 'banish)
#+end_src

** whitespaces

remove trailing whitespaces

#+begin_src emacs-lisp
  (defun k4i/show-trailing-whitespace ()
    "Enable display of trailing whitespace in this buffer."
    (setq-local show-trailing-whitespace t))

  (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
    (add-hook hook 'k4i/show-trailing-whitespace))

  (add-hook 'before-save-hook
            'delete-trailing-whitespace)

  ;; M-SPC
  (global-set-key [remap just-one-space] 'cycle-spacing)
#+end_src

set whitespace display style (with =whitespace= package)

#+begin_src emacs-lisp
#+end_src

** Font

*** text

   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height k4i/default-font-size)

     ;; set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono" :height 1.0)

     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 1.0 :weight 'regular)
   #+END_SRC

*** icons

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** emojis

** Colored Parens

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

show-paren-mode

#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'show-paren-mode)
#+end_src

** colored hex

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :delight)
#+end_src

** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

** Color Theme

run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-gruvbox-light t))

  ;; (run-at-time "3.2" nil (lambda nil (load-theme 'doom-gruvbox-light t nil)))
#+end_src

** Better Modeline

check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-height 15)
    :hook
    (after-init . doom-modeline-mode))
#+end_src

** posframe

ivy-posframe

#+begin_src emacs-lisp
  (use-package ivy-posframe
    :demand t
    :after ivy
    :custom
    (ivy-posframe-display-functions-alist '(
                                            (swiper . ivy-display-function-fallback)
                                            (t . ivy-posframe-display-at-frame-center)
                                            ))
    :config
    (ivy-posframe-mode))
#+end_src

* Snippets/yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook ((prog-mode conf-mode text-mode snippet-mode) . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :after (yasnippet))

  ;; (advice-add 'company-complete-common :before (lambda ()
  ;;                                 (setq my-company-point (point))))
  ;; (advice-add 'company-complete-common :after (lambda ()
  ;;                                 (when (equal my-company-point (point)) (yas-expand))))
#+end_src

* Org Mode

** Basic Config

*** Better Font Faces

The =k4i/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp
  (defun k4i/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'bold :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    ;; (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    ;; (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    )
#+end_src

*** Org Mode

#+begin_src emacs-lisp
  (defun k4i/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (setq-local electric-pair-inhibit-predicate `(lambda (c) (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . k4i/org-mode-setup)
    :custom
    ;; (org-image-actual-width (/ (nth 3 (assq 'geometry (frame-monitor-attributes))) 3))
    (org-startup-folded t)
    (org-directory (expand-file-name "Org" (getenv "HOME")))
    ;; (org-ellipsis " ▾")
    (org-ellipsis "⇙")
    (org-agenda-start-with-log-mode t)
    ;; (org-hide-emphasis-markers t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    ;; org-directory/GTD
    (org-agenda-files (list (expand-file-name "GTD" org-directory)))
    ;; tags: C-c C-q
    (org-tag-alist
     '((:startgroup)
       ("@notes" . ?n)
       ("@workspace_setup" . ?w)
       ("@Data_Structure_and_Algorithm" . ?d)
       (:endgroup)
       ("idea" . ?i)))
    :config
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; https://stackoverflow.com/questions/1218238/how-to-make-part-of-a-word-bold-in-org-mode
    ;; (setcar org-emphasis-regexp-components " \t('\"{[:alpha:]")
    ;; (setcar (nthcdr 1 org-emphasis-regexp-components) "[:alpha:]- \t.,:!?;'\")}\\")
    ;; (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

    ;; ;;
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "CANCELED(c)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (k4i/org-font-setup))
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** center org buffer

#+begin_src emacs-lisp
  (defun k4i/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . k4i/org-mode-visual-fill)
    :config
    (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))
#+end_src

*** key bindings

#+begin_src emacs-lisp
  (general-evil-define-key '(normal visual insert) org-mode-map
    "M-h" 'org-metaleft
    "M-H" 'org-shiftmetaleft
    "M-l" 'org-metaright
    "M-L" 'org-shiftmetaright
    "M-j" 'org-metadown
    "M-J" 'org-shiftmetadown
    "M-k" 'org-metaup
    "M-K" 'org-shiftmetaup)
#+end_src

** Org Agenda

*** custom commands

#+begin_src emacs-lisp
  ;; Configure custom agenda views
  (with-eval-after-load 'org-agenda
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 14)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files))))))))
#+end_src

*** Org Habit

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60))
#+end_src

** Drag and Drop using org-download

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :hook ((org-mode dired-mode) . org-download-enable)
    :custom
    (org-download-image-dir "images")
    (org-dwnload-method 'directory)
    (org-download-heading-lvl nil)
    ;; (org-download-timestamp "%Y%m%d-%H%M%S_")
    (org-download-timestamp "")
    :bind
    ("C-M-y" .
     (lambda (&optional noask)
       (interactive "P")
       (let ((file
              (if (not noask)
                  (read-string (format "Filename [%s]: " org-download-screenshot-basename)
                               nil nil org-download-screenshot-basename)
                nil)))
         (org-download-clipboard file))))
    :config
    (require 'org-download)
    (setq org-download-annotate-function #'(lambda (_link) ""))
    (advice-add 'org-download--dir-2 :filter-return #'(lambda (dirname)
                                                        (when dirname (org-hugo-slug dirname)))))
#+end_src

** Drawing

*** plantuml

[[https://github.com/skuro/plantuml-mode][plantuml-mode]] is a major mode for editing PlantUML sources in Emacs.

download [[https://plantuml.com/download][plantuml.jar]] and put it somewhere, set the =org-plantuml-jar-path=. (you can also download with =M-x plantuml-download-jar<RET>=)

also need to add plantuml to org-babel.

#+begin_src emacs-lisp
  (use-package plantuml-mode
    ;; :mode "\\.plu\\'"
    :custom
    (org-plantuml-jar-path (expand-file-name "~/app/plantuml/plantuml.jar"))
    ;; jar, executable, server (experimental)
    (plantuml-default-exec-mode 'jar)
    :config
    ;; https://plantuml.com/en/smetana02
    ;; use smetana insteand of graphviz
    (append plantuml-jar-args '("-Playout=smetana"))
    ;; (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    )
#+end_src

** Org Export

*** revealjs

#+begin_src emacs-lisp
  (use-package ox-reveal
    :after ox
    :custom
    ;; or use a online revealjs
    ;; #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
    (org-reveal-root (concat "file://" (expand-file-name "~/app/revealjs/reveal.js-master/"))))
#+end_src

*** markdown/hugo

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after ox)
#+end_src

*** latex/pdf

need to install some dependencies:

#+begin_src shell
  pip install pygments
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'ox-latex
    ;; http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
    ;; latexmk runs pdflatex/xelatex (whatever is specified) multiple times
    ;; automatically to resolve the cross-references.
    (setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
    ;; (setq org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    (add-to-list 'org-latex-classes
                 '("elegantpaper"
                   "\\documentclass[lang=cn]{elegantpaper}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass[presentation]{beamer}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("frame" "none")
            ("linenos" "false")
            ("breaklines" "true")
            ("bgcolor" "lightgray")))
    (add-to-list 'org-latex-packages-alist '("" "minted")))
#+end_src

*** bib

https://fortune-teller-amy-88756.netlify.app/knusper

#+begin_src emacs-lisp
  (use-package ebib
    :ensure t
    :config
    (setq ebib-index-columns
          (quote
           (("timestamp" 12 t)
            ("Entry Key" 20 t)
            ("Author/Editor" 40 nil)
            ("Year" 6 t)
            ("Title" 50 t))))
    (setq ebib-index-default-sort (quote ("timestamp" . descend)))
    (setq ebib-index-default-sort (quote ("timestamp" . descend)))
    (setq ebib-preload-bib-files (quote ("~/science_works/bibliography.bib")))
    (setq ebib-timestamp-format "%Y.%m.%d")
    (setq ebib-use-timestamp t))
#+end_src

** Org Babel

*** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  (defun k4i/org-confirm-babel-evaluate (lang body)
    (not (or
          (string= lang "plantuml")
          )))

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       (python . t)
       (plantuml . t)
       ))
    (setq org-confirm-babel-evaluate #'k4i/org-confirm-babel-evaluate)
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

*** Tangle Config Files

This snippet adds a hook to =org-mode= buffers so that =k4i/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is inside =user-emacs-directory=, and if so, automatically exports the configuration here to the associated output files.

The line =#+PROPERTY: header-args:emacs-lisp :tangle ./init.el= at the beginning of this document tells that emacs-lisp blocks will be tangled to =./init.el=.

#+begin_src emacs-lisp
  ;; Automatically tangle our org config file in the emacs directory when we save it
  (defun k4i/org-babel-tangle-config ()
    "tangle any org-mode file inside user-emacs-directory"
    (when (string-equal (file-name-directory (buffer-file-name))

                        (let (
                              ;; (emacs-config-dir user-emacs-directory)
                              (emacs-config-dir "~/.dotfiles/.emacs.d/")
                              )
                          (expand-file-name emacs-config-dir))
                        )
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'k4i/org-babel-tangle-config)))
#+end_src

** Capture Templates

*** task

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("t" "Task"  entry
                   (file "GTD/Tasks.org")
                   "* TODO %?\nDEADLINE: %(format-time-string \"%<<%Y-%m-%d %a>>\")\n"
                   :unnarrowed t)))
#+end_src

*** Contact

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("c" "Contact"  entry
                   (file "GTD/Contacts.org")
                   "* %?\n:PROPERTIES:\n:ADDRESS:\n:PHONE:\n:BDAY: %(format-time-string \"%<<%Y-%m-%d %a +1y>>\")\n:EMAIL:\n:END:\n"
                   :unnarrowed t)))
#+end_src

*** habit

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("h" "Habit"  entry
                   (file "GTD/Habits.org")
                   "* NEXT %?\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"
                   :unnarrowed t)))
#+end_src

*** hugo post

#+begin_src emacs-lisp
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
   See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "\n* TODO " title "  :@cat:tag:")
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_HUGO_BUNDLE: " fname)
                   ":EXPORT_FILE_NAME: index"
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image \"/images/icons/tortoise.png\""
                   ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :libraries '(mathjax)"
                   ":EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :description \"this is a description\""
                   ":END:"
                   "%?\n")
                 "\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (setq hugo-content-org-dir "~/git-repo/blog/blog-src/content-org")
    (add-to-list 'org-capture-templates
                 `("pe"                ;`org-capture' binding + h
                   "Hugo Post (en)"
                   entry
                   ;; It is assumed that below file is present in `org-directory'
                   ;; and that it has a "Blog Ideas" heading. It can even be a
                   ;; symlink pointing to the actual location of all-posts.org!
                   (file ,(expand-file-name "all-posts.en.org" hugo-content-org-dir))
                   (function org-hugo-new-subtree-post-capture-template)))
    (add-to-list 'org-capture-templates
                 `("pz"
                   "Hugo Post (zh)"
                   entry
                   (file ,(expand-file-name "all-posts.zh.org" hugo-content-org-dir))
                   (function org-hugo-new-subtree-post-capture-template)))
    (add-to-list 'org-capture-templates '("p" "Hugo Post")))
#+end_src

** Org Roam

*** basic

#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (expand-file-name "Org-Roam" org-directory))
    (org-roam-complete-everywhere t)
    :config
    (org-roam-setup)
    (setq org-roam-capture-templates
          '(("d" "default" plain "%?"
             :target (file+head "${slug}.org"
                                "#+title: ${title}\n")
             :unnarrowed t
             )))

    ;; changing title changes file name and refs automatically
    (defun org-rename-to-new-title ()
      (when-let*
          ((old-file (buffer-file-name))
           (is-roam-file (org-roam-file-p old-file))
           (file-node (save-excursion
                        (goto-char 1)
                        (org-roam-node-at-point)))
           (slug (org-roam-node-slug file-node))
           (new-file (expand-file-name (concat slug ".org")))
           (different-name? (not (string-equal old-file new-file))))
        (rename-buffer new-file)
        (rename-file old-file new-file)
        (set-visited-file-name new-file)
        (set-buffer-modified-p nil)))

    (add-hook 'after-save-hook 'org-rename-to-new-title)

    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n r" . org-roam-node-random)
     :map org-mode-map
     ("C-c n i" . org-roam-node-insert)
     ("C-c n o" . org-id-get-create)
     ("C-c n t" . org-roam-tag-add)
     ("C-c n a" . org-roam-alias-add)
     ("C-c n l" . org-roam-buffer-toggle)
     ;; ("C-M-i" . completion-at-point)
     ))
#+end_src

*** ui

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t))
#+end_src

* Development

** camelcase motion

#+begin_src emacs-lisp
  (use-package subword
    :hook (prog-mode . subword-mode)
    :diminish)
#+end_src

** symbol overlay

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :hook ((prog-mode html-mode yaml-mode conf-mode) . symbol-overlay-mode)
    :bind (:map symbol-overlay-mode-map
                ("M-i" . symbol-overlay-put)
                ("M-I" . symbol-overlay-remove-all)
                ("M-n" . symbol-overlay-jump-next)
                ("M-p" . symbol-overlay-jump-prev))
    :diminish)
#+end_src

** no wrap line

https://stackoverflow.com/questions/10235305/in-emacs-can-i-have-one-set-of-line-wrap-settings-for-code-and-one-for-text

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook '(lambda ()
                               (setq truncate-lines t)))
#+end_src

** flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode)
    :custom
    (flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)
    )
#+end_src

# #+begin_src emacs-lisp
#   (use-package flycheck-posframe
#     :after flycheck
#     :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
# #+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  (use-package company
    :init (global-company-mode)
    :bind (:map company-mode-map
                ("M-/" . company-complete)
                ;; not smart enough
                ;; ("<tab>" . company-indent-or-complete-common)
                :map company-active-map
                ("RET" . nil)
                ("<return>" . nil)
                ("<tab>" . company-complete-selection)
                ("M-/" . company-other-backend))
    :custom
    (company-global-modes '(not message-mode help-mode magit-mode))
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-tooltip-aligh-annotations t)
    ;; easy navigation to candidates with M-<n>
    (company-show-numbers t)
    (company-dabbrev-downcase nil)
    (company-backends '((company-files
                         company-yasnippet
                         company-keywords
                         company-capf)
                        (company-abbrev company-dabbrev)))
    :config
    (defun my-company-yasnippet-disable-inline (fun command &optional arg &rest _ignore)
      "Enable yasnippet but disable it inline."
      (if (eq command 'prefix)
          (when-let ((prefix (funcall fun 'prefix)))
            (unless (memq (char-before (- (point) (length prefix))) '(?. ?> ?\())
              prefix))
        (funcall fun command arg)))
    (advice-add #'company-yasnippet :around #'my-company-yasnippet-disable-inline)
    :diminish company-mode)

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Formatting

#+begin_src emacs-lisp
  (use-package format-all
    :hook
    (prog-mode . format-all-mode)
    (format-all-mode . format-all-ensure-formatter))
#+end_src

- shfmt: shell

** Compile

*** COMMENT compile command

#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format
                    "clang++ -std=c++17 -g -I$HOME/include -o %s %s -DLOCAL_DEBUG "
                    (file-name-sans-extension buffer-file-name)
                    buffer-file-name
                    ))))
#+end_src

*** hide window after compilation

#+begin_src emacs-lisp
  (defun bury-compile-buffer-if-successful (buffer string)
    "Bury a compilation buffer if succeeded without warnings "
    (if (and
         (string-match "compilation" (buffer-name buffer))
         (string-match "finished" string)
         (not
          (with-current-buffer buffer
            (goto-char (point-min))
            (search-forward "warning" nil t))))
        (run-with-timer 1 nil
                        (lambda (buf)
                          (bury-buffer buf)
                          (switch-to-prev-buffer (get-buffer-window buf) 'kill)
                          ;; (delete-windows-on buf)
                          )
                        buffer)))
  (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/git-repo/")
      (setq projectile-project-search-path '("~/git-repo/")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

* Git

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)
#+end_src

* lsp-mode

** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp
  (defun k4i/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . k4i/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src

** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after lsp)
#+end_src

* dap-mode

[[https://emacs-lsp.github.io/dap-mode/][dap-mode]] is an excellent package for bringing rich debugging capabilities to Emacs via the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]].  You should check out the [[https://emacs-lsp.github.io/dap-mode/page/configuration/][configuration docs]] to learn how to configure the debugger for your language.  Also make sure to check out the documentation for the debug adapter to see what configuration parameters are available to use for your debug templates!

[[https://emacs-lsp.github.io/dap-mode/page/features/#launchjson-support][launch.json support]]

#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    (require 'dap-python)

    ;; C/C++
    ;; lldb is a debugger that supports: C, C++, Objective-C, Swift
    ;; dap-lldb can't get user input: https://github.com/emacs-lsp/dap-mode/issues/58
    (require 'dap-lldb)
    ;; native debug: https://marketplace.visualstudio.com/items?itemName=webfreak.debug
    ;; (require 'dap-gdb-lldb) ; then run dap-gdb-lldb-setup
    ;; (require 'dap-codelldb)
    ;; set the debugger executable (c++), by default it looks for it under .emacs.d/..
    ;; (setq dap-lldb-debug-program '("lldb-vscode"))

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger")))
#+end_src

* Languages
** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no
  npm install -g typescript-language-server typescript
#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

** C/C++



*** header file mode: c or c++

#+begin_src emacs-lisp
  ;; from: https://stackoverflow.com/a/3346308
  ;; function decides whether .h file is C or C++ header, sets C++ by
  ;; default because there's more chance of there being a .h without a
  ;; .cc than a .h without a .c (ie. for C++ template files)
  (defun c-c++-header ()
    "sets either c-mode or c++-mode, whichever is appropriate for
  header"
    (interactive)
    (let ((c-file (concat (substring (buffer-file-name) 0 -1) "c")))
      (if (file-exists-p c-file)
          (c-mode)
        (c++-mode))))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c-c++-header))
#+end_src

** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no
  pip install --user "python-lsp-server"
#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
#+end_src

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src

** lisp

*** slime

#+begin_src emacs-lisp
  (use-package slime
    :config
    (load (expand-file-name "~/quicklisp/slime-helper.el"))
    (setq inferior-lisp-program "sbcl")
    (slime-setup '(slime-fancy slime-company slime-cl-indent)))
#+end_src

Use =M-x slime= to fire up and connect to an inferior Lisp.

*** slime-company

#+begin_src emacs-lisp
  (use-package slime-company
    :after (slime company)
    :config
    (setq slime-company-completion 'fuzzy
          slime-company-after-completion 'slime-company-just-one-space))
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :hook (rust-mode . lsp-deffered))

  (use-package flycheck-rust
    :config
    (with-eval-after-load 'rust-mode
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))

  (use-package cargo
    :hook (rust-mode . cargo-minor-mode)
    :diminish cargo-minor-mode)

#+end_src

* Terminal - vterm

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>❯\n]*[#$%>❯] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000)
    (define-key vterm-mode-map [return]                      #'vterm-send-return)

    (setq vterm-keymap-exceptions nil)
    (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
    (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
    (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
    (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
    (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
    (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
    (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
    (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume)
    )
#+end_src

navigate between prompts: =[[=, =]]=

** COMMENT multi-vterm

#+begin_src emacs-lisp
  (use-package multi-vterm
    :config
    (add-hook 'vterm-mode-hook
              (lambda ()
                (setq-local evil-insert-state-cursor 'box)
                (evil-insert-state)))
    (define-key vterm-mode-map [return]                      #'vterm-send-return)

    (setq vterm-keymap-exceptions nil)
    (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
    (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
    (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
    (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
    (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
    (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
    (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
    (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
#+end_src

** vterm-toggle

#+begin_src emacs-lisp
  (use-package vterm-toggle
    :custom
    (vterm-toggle-hide-method 'delete-window)
    :hook
    (vterm-toggle-show . evil-insert-state)
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (defun vmacs-term-mode-p(&optional args)
      (derived-mode-p 'eshell-mode 'term-mode 'shell-mode 'vterm-mode))
    (setq vterm-toggle--vterm-buffer-p-function 'vmacs-term-mode-p)
    (add-to-list 'display-buffer-alist
                 '((lambda (bufname _)
                     (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   ;; (display-buffer-reuse-window display-buffer-in-side-window)
                   (display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   (direction . bottom)
                   ;; (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))
#+end_src

** eshell

#+begin_src emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
      current buffer's file. The eshell is renamed to match that
      directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))

      (insert (concat "ls"))
      (eshell-send-input)))

  (global-set-key (kbd "C-!") 'eshell-here)
#+end_src

#+begin_src emacs-lisp
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))
#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :general
    (:states 'normal
     :keymaps 'dired-mode-map
     "c" '(nil :which-key "create")
     "cc" 'dired-do-compress-to
     "cf" 'dired-create-empty-file
     "cd" 'dired-create-directory
     "h" 'dired-single-up-directory
     "l" 'dired-single-buffer))

  ;; use single buffer
  (use-package dired-single
    :commands (dired dired-jump))

  ;; use all-the-icons icon in dired
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<S-iso-lefttab>" . dired-subtree-remove)))

  (use-package dired-ranger)

  (use-package dired-open
    :commands (dired dired-jump)
    :general
    ("C-c o" 'dired-open-xdg)
    :config
    ;; by default <Enter> does not use dired-open-xdg
    ;; (add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    ;; :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

*** Navigation

*Evil* (function)
- =j= - next line
- =k= - previous line
- =h= (dired-single-up-directory) - go to parent directory
- =^= (dired-up-directory) - go to parent directory (but *new buffer*)
- =l= (dired-single-buffer) - Open file in current buffer (if not directory, then use new buffer created)
- =RET= (dired-find-file) - Open file in "current" window (but *new buffer*)
- =g o= (dired-view-file) - Open file but in a "preview" mode, close with =q=
- =g O= - Open file in "other" window
- =M-RET= - Open file in "other" window without focusing (previewing files)
- =J= (dired-goto-file) - jump to file in buffer
- =g r= (revert-buffer) - Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

*** Deleting files

- =D= - Delete current file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

** Treemacs

*** treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :custom
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-width-is-initially-locked nil)
    ;; (treemacs-project-follow-mode t)
    )
#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** treemacs-evil

#+begin_src emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+end_src

*** Key Bindings

- =R= - rename
- =m= - move
- =cf= - create file
- =cd= - create directory
- =yf= - copy file
- =ya= - copy absolute path
- =yr= - copy relative path (relative to current treemacs root)
- =yp= - copy treemacs root path (also project root)

* Proxy

** Socks Proxy

#+begin_src emacs-lisp
  (defun proxy-socks-show ()
    "Show SOCKS proxy."
    (interactive)
    (when (fboundp 'cadddr)
      (if (bound-and-true-p socks-noproxy)
          (message "Current SOCKS%d proxy is %s:%d"
                   (cadddr socks-server) (cadr socks-server) (caddr socks-server))
        (message "No SOCKS proxy"))))

  (defun proxy-socks-enable ()
    "Enable SOCKS proxy."
    (interactive)
    (require 'socks)
    (setq url-gateway-method 'socks
          socks-noproxy '("localhost")
          socks-server '("Default server" "127.0.0.1" 1082 5))
    (setenv "all_proxy" "socks5://127.0.0.1:1082")
    (proxy-socks-show))

  (defun proxy-socks-disable ()
    "Disable SOCKS proxy."
    (interactive)
    (require 'socks)
    (setq url-gateway-method 'native
          socks-noproxy nil)
    (setenv "all_proxy" "")
    (proxy-socks-show))

  (defun proxy-socks-toggle ()
    "Toggle SOCKS proxy."
    (interactive)
    (require 'socks)
    (if (bound-and-true-p socks-noproxy)
        (proxy-socks-disable)
      (proxy-socks-enable)))
#+end_src

** Http Proxy

#+begin_src  emacs-lisp
  ;; Configure network proxy
  (setq my-http-proxy "127.0.0.1:8080")
  (defun proxy-http-show ()
    "Show http/https proxy."
    (interactive)
    (if url-proxy-services
        (message "Current proxy is \"%s\"" my-http-proxy)
      (message "No proxy")))

  (defun proxy-http-enable ()
    "Set http/https proxy."
    (interactive)
    (setq url-proxy-services `(("http" . ,my-http-proxy)
                               ("https" . ,my-http-proxy)))
    (proxy-http-show))

  (defun proxy-http-disable ()
    "Unset http/https proxy."
    (interactive)
    (setq url-proxy-services nil)
    (proxy-http-show))

  (defun proxy-http-toggle ()
    "Toggle http/https proxy."
    (interactive)
    (if url-proxy-services
        (proxy-http-disable)
      (proxy-http-enable)))
#+end_src

** HTTP Proxy to Socks5

Install [[https://github.com/qwj/python-proxy][python-proxy]].

#+begin_src shell
  pip3 install pproxy
  # http://127.0.0.1:8080
  pproxy -r socks5://127.0.0.1:1082 -vv
#+end_src
