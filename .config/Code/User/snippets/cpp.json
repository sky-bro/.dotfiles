{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cpp": {
		"prefix": "cpp",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"\nusing namespace std;",
			"\n$0\n",
		]
	},
	"competitive cpp": {
		"prefix": "ccp",
		"body": [
			"#include<bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"static int x = []() { std::ios::sync_with_stdio(false); cin.tie(0); return 0; } ();",
			"typedef long long ll;",
			"\n$0\n"
		]
	},
	"run case": {
		"prefix": "runc",
		"body": [
			"void run_case() {",
			"\t$0",
			"}\n",
			"int main(int argc, char const *argv[]) {",
			"\tint T;",
			"\tcin >> T;",
			"\twhile (T--) {",
			"\t\trun_case();",
			"\t}",
			"\treturn 0;",
			"}"
		]
	},
	"long long": {
		"prefix": "ll",
		"body": "typedef long long ll;"
	},
	"unsigned long long": {
		"prefix": "ull",
		"body": "typedef unsigned long long ull;"
	},
	"d4": {
		"prefix": "d4",
		"body": [
			"int di[4] = {0, 0, 1, -1};",
			"int dj[4] = {1, -1, 0, 0};"
		]
	},
	"mod": {
		"prefix": "mod",
		"body": [
			"const int MOD = ${1:1e9 + 7};"
		]
	},
	"kickstart": {
		"prefix": "kick",
		"body": [
			"void solve(int case_num) {",
			"\t$0",
			"\tint res = 0;",
			"\tcout << res << \"\\n\";",
			"}",
			"",
			"int main(int argc, char const *argv[]) {",
			"\tint T;",
			"\tcin >> T;",
			"\tfor (int t = 1; t <= T; ++t) {",
			"\t\tcout << \"Case #\" << t << \": \";",
			"\t\tsolve(t);",
			"\t}",
			"\treturn 0;",
			"}"
		]
	},
	"leetcode": {
		"prefix": "lee",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"\n#include \"leetcode.hpp\"",
			"\nusing namespace std;",
			"\n$0",
		]
	},
	"TreeNode": {
		"prefix": "tree",
		"body": [
			"struct TreeNode {",
			"\tint val;",
			"\tTreeNode *left;",
			"\tTreeNode *right;",
			"\tTreeNode(int x) : val(x), left(NULL), right(NULL) {}",
			"};",
			"\n$0",
		]
	},
	"ListNode": {
		"prefix": "list",
		"body": [
			"struct ListNode {",
			"\tint val;",
			"\tListNode *next;",
			"\tListNode(int x) : val(x), next(NULL) {}",
			"};",
			"\n$0",
		]
	},
	"printArr": {
		"prefix": "pa",
		"body": [
			"template <typename T>",
			"void printArr(const vector<T> &arr) {",
			"\tfor (const T &t : arr) cout << t << \" \";",
			"\tcout << endl;",
			"}"
		]
	},
	"printArr2D": {
		"prefix": "pa2",
		"body": [
			"template <typename T>",
			"void printArr2D(const vector<vector<T>> &arr2D) {",
			"\tfor (const auto &vt : arr2D) printArr(vt);",
			"}"
		]
	}
}