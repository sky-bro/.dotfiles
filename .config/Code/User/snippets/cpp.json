{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cpp": {
		"prefix": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"int __fastio = []() { ios_base::sync_with_stdio(false); cout << fixed << setprecision(10); cin.tie(nullptr); return 0; } ();",
			"\n$0\n",
		]
	},
	"competitive cpp": {
		"prefix": "ccp",
		"body": [
			"// =========== Template ========== //",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"int __fastio = []() { ios_base::sync_with_stdio(false); cout << fixed << setprecision(10); cin.tie(nullptr); return 0; } ();",
			"template<typename A> ostream& operator<<(ostream &os, const set<A> &m) { os << \"{\"; string sep = \"\"; for (auto e: m) os << sep << e, sep = \", \"; return os << \"}\"; }",
			"template<typename A> ostream& operator<<(ostream &os, const multiset<A> &m) { os << \"{\"; string sep = \"\"; for (auto e: m) os << sep << e, sep = \", \"; return os << \"}\"; }",
			"template<typename A, typename B> ostream& operator<<(ostream &os, const map<A, B> &m) { os << \"{\"; string sep = \"\"; for (auto e: m) os << sep << e.first << \": \" << e.second, sep = \", \"; return os << \"}\"; }",
			"template<typename T>ostream& operator<<(ostream& os, const vector<T>& v) { os << \"[\"; string sep = \"\"; for (auto e: v) os << sep << e, sep = \", \"; return os << \"]\"; }",
			"template<typename T, size_t L>ostream& operator<<(ostream& os, const array<T, L>& v) { os << \"[\"; string sep = \"\"; for (int i = 0; i < L; ++i) os << sep << v[i], sep = \", \"; return os << \"]\"; }",
			"template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { os << '(' << p.first << \", \" << p.second << ')'; return os; }",
			"template<typename...Ts> ostream& operator<<(ostream &os, const tuple<Ts...> &t) { os << '('; apply([&os](Ts const&...args) { size_t i = 0, n = sizeof...(Ts); ((os << args << (++i != n ? \", \" : \"\")), ...); }, t); return os << ')'; }",
			"void dbg_out() { cerr << endl; }",
			"template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
			"#ifdef SKY_DEBUG",
			"#define pp(...) cerr << \"\\t[\" << #__VA_ARGS__ << \"]:\\t\", dbg_out(__VA_ARGS__)",
			"#define ppp(x) cerr << x << \"\\n\"",
			"#else",
			"#define pp(...)",
			"#define ppp(...)",
			"#endif",
			"template<class Fun> class y_combinator_result { Fun fun_; public: template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {} template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); } };",
			"template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }",
			"#define yc y_combinator",
			"typedef long long ll;",
			"typedef pair<int, int> pii;",
			"typedef pair<ll, ll> pll;",
			"typedef long double ld;",
			"#define fi first",
			"#define se second",
			"#define sz(x) (int((x).size()))",
			"#define data _data",
			"\n$0\n"
		]
	},
	"run case": {
		"prefix": "runc",
		"body": [
			"${1:bool} run_case() {",
			"\t$0",
			"}\n",
			"int main(int argc, char const *argv[]) {",
			"\tint T;",
			"\tcin >> T;",
			"\twhile (T--) {",
			"\t\t${2:cout << (run_case() ? \"YES\\n\" : \"NO\\n\");}",
			"\t}",
			"\treturn 0;",
			"}"
		]
	},
	"solve": {
		"prefix": "sol",
		"body": [
			"${1:bool} solve() {",
			"\t$0",
			"}",
			"",
			"int main(int argc, char const *argv[]) {",
			"\t${2:cout << (solve() ? \"YES\\n\" : \"NO\\n\");}",
			"\treturn 0;",
			"}"
		]
	},
	"long long": {
		"prefix": "ll",
		"body": "typedef long long ll;"
	},
	"unsigned long long": {
		"prefix": "ull",
		"body": "typedef unsigned long long ull;"
	},
	"d4": {
		"prefix": "d4",
		"body": [
			"int di[4] = {0, 0, 1, -1};",
			"int dj[4] = {1, -1, 0, 0};"
		]
	},
	"mod": {
		"prefix": "mod",
		"body": [
			"const int MOD = ${1:1e9 + 7};"
		]
	},
	"kickstart": {
		"prefix": "kick",
		"body": [
			"void solve(int case_num) {",
			"\t$0",
			"\tint res = 0;",
			"\tcout << res << \"\\n\";",
			"}",
			"",
			"int main(int argc, char const *argv[]) {",
			"\tint T;",
			"\tcin >> T;",
			"\tfor (int t = 1; t <= T; ++t) {",
			"\t\tcout << \"Case #\" << t << \": \";",
			"\t\tsolve(t);",
			"\t}",
			"\treturn 0;",
			"}"
		]
	},
	"leetcode": {
		"prefix": "lee",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"\n#include \"leetcode.hpp\"",
			"\nusing namespace std;",
			"\n$0",
		]
	},
	"TreeNode": {
		"prefix": "tree",
		"body": [
			"struct TreeNode {",
			"\tint val;",
			"\tTreeNode *left;",
			"\tTreeNode *right;",
			"\tTreeNode(int x) : val(x), left(NULL), right(NULL) {}",
			"};",
			"\n$0",
		]
	},
	"ListNode": {
		"prefix": "list",
		"body": [
			"struct ListNode {",
			"\tint val;",
			"\tListNode *next;",
			"\tListNode(int x) : val(x), next(NULL) {}",
			"};",
			"\n$0",
		]
	},
	"printArr": {
		"prefix": "pa",
		"body": [
			"template <typename T>",
			"void printArr(const vector<T> &arr) {",
			"\tfor (const T &t : arr) cout << t << \" \";",
			"\tcout << endl;",
			"}"
		]
	},
	"printArr2D": {
		"prefix": "pa2",
		"body": [
			"template <typename T>",
			"void printArr2D(const vector<vector<T>> &arr2D) {",
			"\tfor (const auto &vt : arr2D) printArr(vt);",
			"}"
		]
	},
	// ALGORITHMS, source code at: https://github.com/sky-bro/AC/tree/master/Algorithms

	"trie": {
		"prefix": "trie",
		"body": [
			"// root is at 0",
			"const int MAX_NUMBER_OF_NODES = 2e5+5, MAX_ASCII_CODE = 128;",
			"int tr[MAX_NUMBER_OF_NODES][MAX_ASCII_CODE], id = 0; // all 0s",
			"",
			"void insert(string s) {",
    		"\tint p = 0, i = 0;",
    		"\twhile (i < s.size()) {",
        	"\t\tif (!tr[p][s[i]]) tr[p][s[i]] = ++id;",
        	"\t\tp = tr[p][s[i]];",
        	"\t\t++i;",
    		"\t}",
			"}"
		]
	},

	"fenwick": {
		"prefix": "fenw",
		"body": [
			"template <typename T>",
			"class fenwick {",
			"public:",
			"\tint n;",
			"\tvector<T> A;",
			"\tfenwick(int n): n(n), A(n+1) {} // A[0] not used",
			"\tT sum(int i) {  // prefix sum: A[1] + A[2] + ... + A[i]",
			"\t\tT v{};",
			"\t\twhile (i) v += A[i], i -= i & -i;",
			"\t\treturn v;",
			"\t}",
			"\tvoid add(int i, T v) {  // adds v to A[i]",
			"\t\twhile (i <= n) A[i] += v, i += i & -i;",
			"\t}",
			"};"
		]
	},

	"segment tree iterative": {
		"prefix": "seg1",
		"body": [
			"// iterative segment tree",
			"// space: O(2*n)",
			"// time to update an element:  O(logn)",
			"// time to update a range of size m:  O(mlogn)",
			"// time to query a range: O(logn)",
			"class SegTree {",
			"private:",
	 		"\tint n;",
	 		"\tvector<int> t;",
			"",
			"public:",
	 		"\tSegTree(vector<int>& nums) : n(nums.size()), t(2 * n) {",
	   		"\t\tfor (int i = 0; i < n; ++i) t[i + n] = nums[i];",
	   		"\t\tfor (int i = n - 1; i > 0; --i) t[i] = t[i << 1] + t[i << 1 | 1];",
	 		"\t}",
	 		"\tvoid update(int i, int val) {",
	   		"\t\ti += n;",
	   		"\t\tif (t[i] == val) return;",
	   		"\t\tfor (t[i] = val; i > 1; i >>= 1) t[i >> 1] = t[i] + t[i ^ 1];",
	 		"\t}",
	 		"\tint query(int i, int j) {  // sum range [i, j]",
	   		"\t\tint sum = 0;",
	   		"\t\tfor (i += n, j += n + 1; i < j; i >>= 1, j >>= 1) {",
		 	"\t\t\tif (i & 1) sum += t[i++];",
			"\t\t\tif (j & 1) sum += t[--j];",
	   		"\t\t}",
	   		"\t\treturn sum;",
	 		"\t}",
   			"};"
		]
	},

	"matrix": {
		"prefix": "mat",
		"body": [
			"template <typename T, std::size_t R, std::size_t C = R, std::size_t M = INT32_MAX>",
			"class Matrix {",
 			"public:",
  			"\tT m[R][C];",
			"",
  			"\tMatrix() { memset(m, 0, sizeof(m)); }",
			"\t/**",
			"\t* construct a matrix whose diagonal (fill at most min(R, C) number as x) is",
			"\t* filled with number x, and the rest filled with 0's",
			"\t* @param x number to be filled at the diagonal",
			"\t* @param isMainDiagonal fill main diagonal if true, else fill the antidiagonal",
			"\t*/",
			"\tMatrix(T x, bool isMainDiagonal = true) : Matrix() {",
			"\t\tif (isMainDiagonal)",
			"\t\t\tfor (std::size_t i = 0; i < R && i < C; ++i) m[i][i] = x;",
			"\t\telse",
			"\t\t\tfor (std::size_t i = 0, j = C - 1; i < R && j >= 0; --j, ++i) m[i][j] = x;",
			"\t}",
			"",
  			"\ttemplate <std::size_t C2>",
  			"\tMatrix<T, R, C2, M> operator*(const Matrix<T, C, C2, M> &other) const {",
			"\t\tMatrix<T, R, C2, M> res;",
			"\t\tfor (std::size_t i = 0; i < R; ++i)",
			"\t\t\tfor (std::size_t k = 0; k < C; ++k)",
			"\t\t\t\tfor (std::size_t j = 0; j < C2; ++j)",
			"\t\t\t\t\tres.m[i][j] = (res.m[i][j] + m[i][k] * other.m[k][j] % M) % M;",
			"\t\treturn res;",
  			"\t}",
			"",
			"\tMatrix<T, R, C, M> &operator*=(const Matrix<T, C, C, M> &other) {",
			"\t\treturn *this = *this * other;",
			"\t}",
			"",
  			"\tvoid fill(T x) {",
    		"\t\tfor (std::size_t i = 0; i < R; ++i)",
      		"\t\t\tfor (std::size_t j = 0; j < C; ++j) m[i][j] = x;",
  			"\t}",
			"",
  			"\tT sum() const {",
    		"\t\tT res = 0;",
    		"\t\tfor (std::size_t i = 0; i < R; ++i)",
      		"\t\t\tfor (std::size_t j = 0; j < C; ++j) res = (res + m[i][j]) % M;",
    		"\t\treturn res;",
  			"\t}",
			"};",
		]
	},

	"point": {
		"prefix": "point",
		"body": [
			"template<class T>",
			"struct Point {",
   			"\ttypedef Point P;",
   			"\tT x, y;",
   			"\texplicit Point(T x=0, T y=0) : x(x), y(y) {}",
   			"\tbool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }",
   			"\tbool operator==(P p) const { return tie(x,y)==tie(p.x,p.y); }",
   			"\tP operator+(P p) const { return P(x+p.x, y+p.y); }",
   			"\tP operator-(P p) const { return P(x-p.x, y-p.y); }",
   			"\tP operator*(T d) const { return P(x*d, y*d); }",
   			"\tP operator/(T d) const { return P(x/d, y/d); }",
   			"\tT dot(P p) const { return x*p.x + y*p.y; }",
   			"\tT cross(P p) const { return x*p.y - y*p.x; }",
   			"\tT cross(P a, P b) const { return (a-*this).cross(b-*this); }",
   			"\tT dist2() const { return x*x + y*y; }",
   			"\tdouble dist() const { return sqrt((double)dist2()); }",
   			"\t// angle to x-axis in interval [-pi, pi]",
   			"\tdouble angle() const { return atan2(y, x); }",
   			"\tP unit() const { return *this/dist(); } // makes dist()=1",
   			"\tP perp() const { return P(-y, x); } // rotates +90 degrees",
   			"\tP normal() const { return perp().unit(); }",
   			"\t// returns point rotated 'a' radians ccw around the origin",
   			"\tP rotate(double a) const { return P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }",
   			"\tfriend ostream& operator<<(ostream& os, P p) { return os << \"(\" << p.x << \",\" << p.y << \")\"; }",
			"};"
		]
	},

	"three way partition": {
		"prefix": "3way",
		"body": [
			"// after partition, it's like:",
  			"// ---[=]=[=]+++",
  			"//    low high",
  			"int i = l, low = l, high = r;",
  			"while (i <= high) {",
    		"if (L[i] == target)",
      		"\t++i;",
    		"else if (L[i] < target)",
      		"\tswap(L[i++], L[low++]);",
    		"else",
      		"\tswap(L[i], L[high--]);",
  			"// do something with low, high..."
		]
	},

	"fast pow": {
		"prefix": "fpow",
		"body": [
			"template <typename T>",
			"T fpow(T x, int n) {",
  			"\tT ret = 1;",
  			"\twhile (n) {",
    		"\t\tif (n & 1) ret *= x;",
    		"\t\tx *= x;",
    		"\t\tn >>= 1;",
  			"\t}",
  			"\treturn ret;",
			"}"
		]
	},

	"kmp": {
		"prefix": "kmp",
		"body": [
			"int kmpNext[100];",
			"",
			"/**",
 			"* 填充p_len+1长的数组",
 			"* i处对应元素表示其前面的子串的前缀后缀最大重合长度j,",
 			"* 但如果j对应字符和i处对应字符相同, 则将本该填充的j改为kmpNext[j]",
 			"* 由子问题不断构造",
 			"*/",
			"void initPattern(char *pattern, int p_len){",
    		"\tint i, j;",
    		"\ti = 0;",
    		"\tj = kmpNext[0] = -1; // kmpNext[0]永远都是-1",
    		"\twhile (i < p_len) { // i从0开始到p_len-1, 但每次循环填充的是kmpNext[i+1]",
        	"\t// 这里的关键是要理解j表示什么含义, 初始什么含义, 为什么要经过这个while循环?",
        	"\t// 首先本次循环是要填充i+1处的值, 这里的j要表示的就是字串pattern[0...i]的最长前后缀重复长度-1",
        	"\t\twhile (j > -1 && pattern[i] != pattern[j]) // j最小为-1, 表示重复长度为0",
            "\t\t\tj = kmpNext [j];",
            "",
        	"\t\ti++, j++;",
        	"\t\t// 现在i=i+1, 为要填充的位置, 下面说的i都是增加后的i",
        	"\t\t// 现在在i处(现在i处)出现不匹配, 那么我下次应该用模式串的哪个位置再尝试呢?",
        	"\t\tif (pattern[i] == pattern[j])",
        	"\t\t// 如果和i处j处符号相同, 那直接copy人家的值就好了(表示我和之前j处一样,又遇到不匹配): 这里j最小为-1(关键)",
        	"\t\t// 同时, 如果这里相等, 下次在更新j时的循环就不会进入, 相当与相对于上一次的j只增加了1",
			"\t\t\tkmpNext[i] = kmpNext[j];",
        	"\t\telse",
            "\t\t// 如果不同, 那更好了, 可能我当前目标串的符号能和j处的字符匹配: 这里j最小为0(关键)",
            "\t\t\tkmpNext[i] = j;",
    		"\t}",
			"}",
			"",
			"void kmp(char *target, int t_len, char *pattern, int p_len){",
    		"\tinitPattern(pattern, p_len);",
    		"\tint i = 0, j = 0;",
    		"\twhile (j < t_len){",
        	"\t\twhile (i>-1 && pattern[i] != target[j])",
            "\t\t\ti = kmpNext[i];",
        	"\t\t++i, ++j;",
        	"\t\tif (i >= p_len){",
            "\t\t\tprintf(\"%d\\t%s\\n\", j - i, target + j - i);",
            "\t\t\ti = kmpNext[i];",
        	"\t\t}",
    		"\t}",
			"}"
		]
	},

	"dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"/**",
 			"* compute shortest distance from src to all other nodes",
 			"*/",
			"void dijkstra(const vector<unordered_map<int, int>>& G, int src, vector<int>& dist) {",
			"\tint n = G.size();",
			"\tdist.clear();",
			"\tdist.resize(n, -1);",
			"\tvector<bool> vis(n);",
			"\tpriority_queue<pair<int, int>> pq;  // {-weight, label}",
			"\tpq.emplace(0, src);",
			"\tdist[src] = 0;",
			"\twhile (!pq.empty()) {",
			"\t\tauto p = pq.top();",
			"\t\tpq.pop();",
			"\t\tvis[p.second] = true;",
			"\t\tfor (auto neighbor : G[p.second]) {",
			"\t\t\tint v = neighbor.first;",
			"\t\t\tint d = neighbor.second - p.first;",
			"\t\t\tif (vis[neighbor.first]) continue;",
			"\t\t\tif (dist[v] == -1 || dist[v] > d) {",
			"\t\t\t\tpq.emplace(-d, v);",
			"\t\t\t\tdist[v] = d;",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"}"
		]
	}
}
