{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"pwn.tmux": {
		"prefix": "pwn.tmux",
		"body": "context.terminal = ['tmux', 'splitw', '-h']"
	},
	"pwn exp": {
		"prefix": [
			"exp.pwn",
			"pwn"
		],
		"body": [
			"#!/usr/bin/env python",
			"# -*- coding: utf-8 -*-\n",
			"'''",
			"# Created on $CURRENT_MONTH_NAME_SHORT-$CURRENT_DATE-$CURRENT_YEAR_SHORT $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"# $TM_FILENAME",
			"# @author: Kyle - https://sky-bro.github.io",
			"'''",
			"\nfrom pwn import *",
			// "from LibcSearcher import *",
			"\n# ==================== context =====================",
			"exe = context.binary = ELF('${1:./main}')",
			"context.terminal = ['tmux', 'sp', '-h', '-p', '60']",
			"# context.terminal = ['konsole', '-e', 'sh', '-c']",
			"# context.terminal = ['gnome-terminal', '-x', 'sh', '-c']",
			"\n# ===================== io ========================",
			"ru = lambda p, x        : p.recvuntil(x)",
			"sn = lambda p, x        : p.send(x)",
			"rl = lambda p           : p.recvline()",
			"sl = lambda p, x        : p.sendline(x)",
			"rv = lambda p, x=1024   : p.recv(numb = x)",
			"sa = lambda p, a, b     : p.sendafter(a,b)",
			"sla = lambda p, a, b    : p.sendlineafter(a,b)",
			"rr = lambda p, t        : p.recvrepeat(t)",
			"rd = lambda p, x        : p.recvuntil(x, drop=True)",
			"\nhost = args.HOST or '${2:127.0.0.1}'",
			"port = int(args.PORT or ${3:1234})",
			"\ngdbscript = \\",
			"\t'dir ~/src/glibc/glibc-${4:2.23}/malloc' \\",
			"\t'b main' \\",
			"\t'b system' \\",
			"\t'c' \\",
			"\t.format(**locals())",
			"\ndef start(argv=[], *a, **kw):",
			"\tif args.REMOTE:",
			"\t\treturn remote(host, port)",
			"\tif args.LD:",
			"\t\tio = process(['/home/sky/src/glibc/glibc-${4}-out/lib/ld-linux-x86-64.so.2', exe.path] + argv, env={'LD_PRELOAD': '/home/sky/src/glibc/glibc-${4}-out/lib/libc.so.6'}, *a, **kw)",
			"\t\t# io = process(['./ld-${4}.so', exe.path] + argv, env={'LD_PRELOAD': './libc-${4}.so'}, *a, **kw)",
			"\t\t# io = process([exe.path] + argv, env={'LD_PRELOAD': './libc-${4}.so'}, *a, **kw)",
			"\tif args.GDB:",
			"\t\tif args.LD:",
			"\t\t\tgdb.attach(io, gdbscript=gdbscript)",
			"\t\t\treturn io",
			"\t\telse:"
			"\t\t\treturn gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)",
			"\tif not (args.LD or args.GDB):"
			"\t\treturn process([exe.path] + argv, *a, **kw)",
			"\treturn io",
			"\n# ================================================",
			"#                        exp                        ",
			"# ================================================",
			"io = start()",
			"libc = ELF('/home/sky/src/glibc/glibc-${4}-out/lib/libc-${4}.so')",
			"# libc = ELF('./libc-${4}.so')",
			"\n${0:io.send(asm(shellcraft.sh()))}",
			"\nio.interactive()\n"
		],
		"description": "pwn exploitation boilerplate"
	},
	"menu": {
		"prefix": "menu",
		"body": [
			"# --- menu ---",
			"def choice(i):",
			"\tsla(io, 'choice : ', str(i))",
			"\ndef add(idx, size, data):",
			"\tchoice(1)",
			"\tsla(io, 'idx plz : ', str(idx))",
			"\tsla(io, 'size plz : ', str(size))",
			"\tsa(io, 'content plz : ', data)",
			"\ndef rm(idx):",
			"\tchoice(2)",
			"\tsla(io, 'idx plz : ', str(idx))",
			"\ndef show(idx):",
			"\tchoice(3)",
			"\tsla(io, 'idx plz : ', str(idx))",
			"\ndef edit(idx, data):",
			"\tchoice(4)",
			"\tsla(io, 'idx plz : ', str(idx))",
			"\tsa(io, 'content plz : ', data)",
			"\n${0}"
		]
	}
}